fn main(){
  // 先来看看标准库：https://doc.rust-lang.org/std/fmt/index.html
  // 首先看到的是format!宏，用来格式化字符串，而print!或println!宏实际上只是多了一步，将格式化后的字符串输出到标准输出。
  /**
  * 一：直接输出
  */
  println!("hello world!");
  // 2、占位+参数
  println!("hello {}!", "world");
  // 3、参数索引
  println!("hello {0}!", "world");
  // 4、命名参数
  println!("hello {word}!", word = "world");
  // 多种方式混用
  // 注意：所有命名参数必须放最后，索引和命名占位符不会占用普通占位符的位置
  // 试试下面的 println!("hello {}{1}{2}{l}{d}{}", "w", "o", "r", l = "l", d = "d");最后一个字母输出啥？
  println!("hello {}{1}{2}{l}{d}!", "w", "o", "r", l = "l", d = "d");
  /**
  * 二：下面来看看如何控制字符的长度
  */
   // 通过冒号（:）+ 数字的方式来控制输出字符的长度
  println!("hello {:6}!", "world"); // "hello world !"，叹号前面多了个空格
  // 如果数字的值小于字符本身长度呢
  println!("hello {:4}!","world"); // 注意：输出"hello world!"，而不是"hello worl!"，并不会截取，而只是补全长度
  // 如果是汉字呢？
  println!("hello {:5}!", "shi界"); // 可以看到输出了"hello shi界 !"，rust对于字符串采用utf8编码，这里的长度是按照rune32位来计算的，所有的字符都算作一个长度。
  // 如果这个长度值我想用索引参数或者命名参数呢？可以通过在索引或者命名后加上dollar（$）符号的方式
  println!("hello {:1$}!", "world", 6); // "hello world !" 索引参数1当做补齐长度
  println!("hello {:len$}!", "world", len = 6); // "hello world !" 命名参数"len"当做补齐长度
  // 使用了长度设置的占位符本身也还可以使用上面的索引+命名参数
  println!("hello {0:1$}!", "world", 6); // 对索引参数0进行补齐
  println!("hello {word:len$}!", word = "world", len = 6); // 对命名参数word进行补齐
  /**
  * 三：补全填充字符与对齐
  */ 
  // 从上面可以看得出来，补全时字符是左对齐的，填充的字符是空格
  // 如果想修改对其方式或者填充字符，需要先设置对齐方式，填充字符也只有在设置了对齐方式后才能生效
  // 对齐的规则是：通过冒号(:)后面的特殊字符『>^<』大于符号、脱字符、小于符号，通过箭头的指向来表示对齐的方式，比如>，指向右边，表示右对齐（填充字符出现在左边），脱字符^表示不偏向任何一方中间对齐，小于符号<表示左对齐（填充字符出现在右边）
  println!("hello {:-<6}!", "world"); // "hello world-!"
  println!("hello {:-<6}!", "world"); // "hello -world!"
  println!("hello {:-^6}!", "world"); // "hello world-!" 可以看到，如果有余数(6-5) % 2 = 1，优先排右侧，也就是左侧的填充总小于等于右侧的填充，字符会优先往左靠
  /**
   * 四：符号/#/0
   */
  // 使用+-符号来表示要标识数字的正负，正常情况下数字为正时，不使用+符号，前面不会显示+符号。为负的时候，一定会显示-符号。
  println!("hello,{:+6}!", 9527); // "hello, +9527" 长度值包含符号位，且数字的显示是右对齐的，这点和字符串这些的默认正好相反。
  // 由于负数总是会显示-负号，所以-负号没啥使用的必要了
  // 设置了+-正负负号后，数字的对齐方式就只能是右对齐，如果设置对齐方式，正负负号会被当成填充字符。
  println!("hello,{:+<6}!", 9527); // "hello,9527++!"，+符号被当成填充字符了
  // 0的使用
  println!("hello,{:06}!", -9527); // "hello,-09527!"，设置了0的标识后，会在数字前面填充上前导0
  // #的使用

}